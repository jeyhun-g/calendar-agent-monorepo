services:
  backend1:
    restart: always
    build:
      context: ../backend
    expose:
      - 8000
    environment:
      - SERVICE_NAME=backend1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DB_USER=${DB_USER}
      - DB_PWD=${DB_PWD}
      - DB_HOST=192.168.1.20
      - DB_PORT=5432
    depends_on:
      - db
    networks:
      lb_net:
        ipv4_address: 192.168.1.10

  backend2:
    restart: always
    build:
      context: ../backend
    expose:
      - 8000
    environment:
      - SERVICE_NAME=backend2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DB_USER=${DB_USER}
      - DB_PWD=${DB_PWD}
      - DB_HOST=192.168.1.20
      - DB_PORT=5432
    depends_on:
      - db
    networks:
      lb_net:
        ipv4_address: 192.168.1.11

  caddy:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend1
      - backend2
    networks:
      - lb_net
  
  db:
    image: postgres:17-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      lb_net:
        ipv4_address: 192.168.1.20

volumes:
  postgres_data:

networks:
  lb_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24